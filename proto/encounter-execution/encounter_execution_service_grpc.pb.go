// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: encounter_execution_service.proto

package encounter_execution

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EncounterExecutionService_ActivateEncounterRPC_FullMethodName              = "/EncounterExecutionService/ActivateEncounterRPC"
	EncounterExecutionService_AbandonEncounterRPC_FullMethodName               = "/EncounterExecutionService/AbandonEncounterRPC"
	EncounterExecutionService_CheckIfCompletedEncounterRPC_FullMethodName      = "/EncounterExecutionService/CheckIfCompletedEncounterRPC"
	EncounterExecutionService_CompleteMiscEncounterEncounterRPC_FullMethodName = "/EncounterExecutionService/CompleteMiscEncounterEncounterRPC"
)

// EncounterExecutionServiceClient is the client API for EncounterExecutionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EncounterExecutionServiceClient interface {
	ActivateEncounterRPC(ctx context.Context, in *ActivateRequest, opts ...grpc.CallOption) (*EncounterExecutionDtoResponse, error)
	AbandonEncounterRPC(ctx context.Context, in *AbandonRequest, opts ...grpc.CallOption) (*EncounterExecutionDtoResponse, error)
	CheckIfCompletedEncounterRPC(ctx context.Context, in *CheckIfCompletedRequest, opts ...grpc.CallOption) (*EncounterExecutionDtoResponse, error)
	CompleteMiscEncounterEncounterRPC(ctx context.Context, in *CompleteMiscEncounterRequest, opts ...grpc.CallOption) (*EncounterExecutionDtoResponse, error)
}

type encounterExecutionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEncounterExecutionServiceClient(cc grpc.ClientConnInterface) EncounterExecutionServiceClient {
	return &encounterExecutionServiceClient{cc}
}

func (c *encounterExecutionServiceClient) ActivateEncounterRPC(ctx context.Context, in *ActivateRequest, opts ...grpc.CallOption) (*EncounterExecutionDtoResponse, error) {
	out := new(EncounterExecutionDtoResponse)
	err := c.cc.Invoke(ctx, EncounterExecutionService_ActivateEncounterRPC_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encounterExecutionServiceClient) AbandonEncounterRPC(ctx context.Context, in *AbandonRequest, opts ...grpc.CallOption) (*EncounterExecutionDtoResponse, error) {
	out := new(EncounterExecutionDtoResponse)
	err := c.cc.Invoke(ctx, EncounterExecutionService_AbandonEncounterRPC_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encounterExecutionServiceClient) CheckIfCompletedEncounterRPC(ctx context.Context, in *CheckIfCompletedRequest, opts ...grpc.CallOption) (*EncounterExecutionDtoResponse, error) {
	out := new(EncounterExecutionDtoResponse)
	err := c.cc.Invoke(ctx, EncounterExecutionService_CheckIfCompletedEncounterRPC_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encounterExecutionServiceClient) CompleteMiscEncounterEncounterRPC(ctx context.Context, in *CompleteMiscEncounterRequest, opts ...grpc.CallOption) (*EncounterExecutionDtoResponse, error) {
	out := new(EncounterExecutionDtoResponse)
	err := c.cc.Invoke(ctx, EncounterExecutionService_CompleteMiscEncounterEncounterRPC_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EncounterExecutionServiceServer is the server API for EncounterExecutionService service.
// All implementations must embed UnimplementedEncounterExecutionServiceServer
// for forward compatibility
type EncounterExecutionServiceServer interface {
	ActivateEncounterRPC(context.Context, *ActivateRequest) (*EncounterExecutionDtoResponse, error)
	AbandonEncounterRPC(context.Context, *AbandonRequest) (*EncounterExecutionDtoResponse, error)
	CheckIfCompletedEncounterRPC(context.Context, *CheckIfCompletedRequest) (*EncounterExecutionDtoResponse, error)
	CompleteMiscEncounterEncounterRPC(context.Context, *CompleteMiscEncounterRequest) (*EncounterExecutionDtoResponse, error)
	mustEmbedUnimplementedEncounterExecutionServiceServer()
}

// UnimplementedEncounterExecutionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEncounterExecutionServiceServer struct {
}

func (UnimplementedEncounterExecutionServiceServer) ActivateEncounterRPC(context.Context, *ActivateRequest) (*EncounterExecutionDtoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateEncounterRPC not implemented")
}
func (UnimplementedEncounterExecutionServiceServer) AbandonEncounterRPC(context.Context, *AbandonRequest) (*EncounterExecutionDtoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AbandonEncounterRPC not implemented")
}
func (UnimplementedEncounterExecutionServiceServer) CheckIfCompletedEncounterRPC(context.Context, *CheckIfCompletedRequest) (*EncounterExecutionDtoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIfCompletedEncounterRPC not implemented")
}
func (UnimplementedEncounterExecutionServiceServer) CompleteMiscEncounterEncounterRPC(context.Context, *CompleteMiscEncounterRequest) (*EncounterExecutionDtoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteMiscEncounterEncounterRPC not implemented")
}
func (UnimplementedEncounterExecutionServiceServer) mustEmbedUnimplementedEncounterExecutionServiceServer() {
}

// UnsafeEncounterExecutionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EncounterExecutionServiceServer will
// result in compilation errors.
type UnsafeEncounterExecutionServiceServer interface {
	mustEmbedUnimplementedEncounterExecutionServiceServer()
}

func RegisterEncounterExecutionServiceServer(s grpc.ServiceRegistrar, srv EncounterExecutionServiceServer) {
	s.RegisterService(&EncounterExecutionService_ServiceDesc, srv)
}

func _EncounterExecutionService_ActivateEncounterRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncounterExecutionServiceServer).ActivateEncounterRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EncounterExecutionService_ActivateEncounterRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncounterExecutionServiceServer).ActivateEncounterRPC(ctx, req.(*ActivateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EncounterExecutionService_AbandonEncounterRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbandonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncounterExecutionServiceServer).AbandonEncounterRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EncounterExecutionService_AbandonEncounterRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncounterExecutionServiceServer).AbandonEncounterRPC(ctx, req.(*AbandonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EncounterExecutionService_CheckIfCompletedEncounterRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckIfCompletedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncounterExecutionServiceServer).CheckIfCompletedEncounterRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EncounterExecutionService_CheckIfCompletedEncounterRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncounterExecutionServiceServer).CheckIfCompletedEncounterRPC(ctx, req.(*CheckIfCompletedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EncounterExecutionService_CompleteMiscEncounterEncounterRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteMiscEncounterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncounterExecutionServiceServer).CompleteMiscEncounterEncounterRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EncounterExecutionService_CompleteMiscEncounterEncounterRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncounterExecutionServiceServer).CompleteMiscEncounterEncounterRPC(ctx, req.(*CompleteMiscEncounterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EncounterExecutionService_ServiceDesc is the grpc.ServiceDesc for EncounterExecutionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EncounterExecutionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "EncounterExecutionService",
	HandlerType: (*EncounterExecutionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ActivateEncounterRPC",
			Handler:    _EncounterExecutionService_ActivateEncounterRPC_Handler,
		},
		{
			MethodName: "AbandonEncounterRPC",
			Handler:    _EncounterExecutionService_AbandonEncounterRPC_Handler,
		},
		{
			MethodName: "CheckIfCompletedEncounterRPC",
			Handler:    _EncounterExecutionService_CheckIfCompletedEncounterRPC_Handler,
		},
		{
			MethodName: "CompleteMiscEncounterEncounterRPC",
			Handler:    _EncounterExecutionService_CompleteMiscEncounterEncounterRPC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "encounter_execution_service.proto",
}
