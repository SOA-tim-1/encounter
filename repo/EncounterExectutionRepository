package repo

import (
	"database-example/model"
	"errors"

	"gorm.io/gorm"
)

type EncounterRepository struct {
	DatabaseConnection *gorm.DB
}

func NewEncounterRepository(db *gorm.DB) *EncounterRepository {
	return &EncounterRepository{
		DatabaseConnection: db,
	}
}

func (repo *EncounterRepository) GetAllForEncounterId(id int64) ([]*EncounterExecution, error) {
	var encounterExecutions []*EncounterExecution
	result := repo.DatabaseConnection.Where("encounter_id = ?", id).Find(&encounterExecutions)
	if result.Error != nil {
		return nil, result.Error
	}
	return encounterExecutions, nil
}

func (repo *EncounterRepository) GetAllActiveForEncounterId(id int64) ([]*EncounterExecution, error) {
	var encounterExecutions []*EncounterExecution
	result := repo.DatabaseConnection.Where("encounter_id = ? AND status = ?", id, ExecutionActive).Find(&encounterExecutions)
	if result.Error != nil {
		return nil, result.Error
	}
	return encounterExecutions, nil
}

func (repo *EncounterRepository) GetAllForTouristId(id int64) ([]*EncounterExecution, error) {
	var encounterExecutions []*EncounterExecution
	result := repo.DatabaseConnection.Where("tourist_id = ?", id).Find(&encounterExecutions)
	if result.Error != nil {
		return nil, result.Error
	}
	return encounterExecutions, nil
}

func (repo *EncounterRepository) GetByUserId(userId int64) ([]*EncounterExecution, error) {
	var encounterExecutions []*EncounterExecution
	result := repo.DatabaseConnection.Where("tourist_id = ?", userId).Find(&encounterExecutions)
	if result.Error != nil {
		return nil, result.Error
	}
	return encounterExecutions, nil
}
